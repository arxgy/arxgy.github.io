<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="arxgy.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="arxgy.github.io/" rel="alternate" type="text/html" hreflang="en" /><updated>2023-06-13T08:16:02+00:00</updated><id>arxgy.github.io/feed.xml</id><title type="html">blank</title><subtitle>Hello there, I&apos;m Ganxiang Yang, an junior undergrad at SJTU. Welcome to my homepage!
</subtitle><entry><title type="html">现实液体</title><link href="arxgy.github.io/blog/2023/Realistic-Liquid/" rel="alternate" type="text/html" title="现实液体" /><published>2023-01-02T00:00:00+00:00</published><updated>2023-01-02T00:00:00+00:00</updated><id>arxgy.github.io/blog/2023/Realistic-Liquid</id><content type="html" xml:base="arxgy.github.io/blog/2023/Realistic-Liquid/"><![CDATA[<style>
/* p { */
  line-height: 1.2;
/* } */
</style>

<p>我不是蘑菇<br />
拒绝孕育碰运气的孢子<br />
不是谁最爱的榉木<br />
过多的声音搅断我的年轮<br />
择机汹涌，是我<br />
选择一个雨季来篡夺湖泊<br />
气蒸云梦，插标卖首<br /></p>

<p>我早该知道<br />
城外的人怎会后悔<br />
城池之内怎有河流<br />
你问这一身沉默还要编织多久<br />
赤色的坚冰，所有人的哀愁<br />
水的命运，沙的时代<br />
支流从来靠无中生有<br />
或许就现在吗<br />
衔入巫山楚王长梦<br />
吐纳昌谷春日霞蔚<br />
当我再次融入这片滩涂<br />
请允许我与你一起流淌<br />
未曾谋面的处女地<br />
就留给那些魔鬼去纵饮<br /></p>

<!-- 
This post shows how to add custom styles for blockquotes. Based on [jekyll-gitbook](https://github.com/sighingnow/jekyll-gitbook) implementation.

We decided to support the same custom blockquotes as in [jekyll-gitbook](https://sighingnow.github.io/jekyll-gitbook/jekyll/2022-06-30-tips_warnings_dangers.html), which are also found in a lot of other sites' styles. The styles definitions can be found on the [_base.scss](https://github.com/alshedivat/al-folio/blob/master/_sass/_base.scss) file, more specifically:

```scss
/* Tips, warnings, and dangers */
.post .post-content blockquote {
    &.block-tip {
    border-color: var(--global-tip-block);
    background-color: var(--global-tip-block-bg);

    p {
      color: var(--global-tip-block-text);
    }

    h1, h2, h3, h4, h5, h6 {
      color: var(--global-tip-block-title);
    }
  }

  &.block-warning {
    border-color: var(--global-warning-block);
    background-color: var(--global-warning-block-bg);

    p {
      color: var(--global-warning-block-text);
    }

    h1, h2, h3, h4, h5, h6 {
      color: var(--global-warning-block-title);
    }
  }

  &.block-danger {
    border-color: var(--global-danger-block);
    background-color: var(--global-danger-block-bg);

    p {
      color: var(--global-danger-block-text);
    }

    h1, h2, h3, h4, h5, h6 {
      color: var(--global-danger-block-title);
    }
  }
}
```

A regular blockquote can be used as following:

```markdown
> This is a regular blockquote
> and it can be used as usual
```

> This is a regular blockquote
> and it can be used as usual

These custom styles can be used by adding the specific class to the blockquote, as follows:

```markdown
> ##### TIP
>
> A tip can be used when you want to give advice
> related to a certain content.
{: .block-tip }
```

> ##### TIP
>
> A tip can be used when you want to give advice
> related to a certain content.
{: .block-tip }

```markdown
> ##### WARNING
>
> This is a warning, and thus should
> be used when you want to warn the user
{: .block-warning }
```

> ##### WARNING
>
> This is a warning, and thus should
> be used when you want to warn the user
{: .block-warning }

```markdown
> ##### DANGER
>
> This is a danger zone, and thus should
> be used carefully
{: .block-danger }
```

> ##### DANGER
>
> This is a danger zone, and thus should
> be used carefully
{: .block-danger } -->]]></content><author><name></name></author><category term="Poems" /><summary type="html"><![CDATA[献给J的21岁]]></summary></entry><entry><title type="html">Isaiah-Elegy</title><link href="arxgy.github.io/blog/2022/Compiler/" rel="alternate" type="text/html" title="Isaiah-Elegy" /><published>2022-12-13T00:00:00+00:00</published><updated>2022-12-13T00:00:00+00:00</updated><id>arxgy.github.io/blog/2022/Compiler</id><content type="html" xml:base="arxgy.github.io/blog/2022/Compiler/"><![CDATA[<h4 id="overview">Overview</h4>

<p><em>Isaiah, means “Yahweh is salvation”.</em><br />
A toy compiler supports compiling programs written in <code class="language-plaintext highlighter-rouge">Mx*</code>, a C-and-Java-like program language, into <code class="language-plaintext highlighter-rouge">rv32im</code> assembly.</p>

<h4 id="feature">Feature</h4>

<ul>
  <li>Use <code class="language-plaintext highlighter-rouge">ANTLR4</code> to analyze source code</li>
  <li>Support extensible semantic checking.</li>
  <li>Adopt LLVM-like IR, lean but efficient.</li>
  <li>Adopt Memory2Reg, a small optimization</li>
  <li>Advanced Instruction selector</li>
</ul>

<h4 id="evaluation">Evaluation</h4>
<p>It costs me totally 2 months to build this compiler, and 
the <a href="https://github.com/arxgy/Isaiah-Elegy">source code</a> is about <code class="language-plaintext highlighter-rouge">7k+ LoC</code>, which is really bulky for a second-year undergraduate.</p>

<h4 id="source-code">Source Code</h4>
<p><a href="https://github.com/arxgy/Isaiah-Elegy">Here</a>.</p>

<!-- ````markdown
```c++
code code code
```
````

```c++
int main(int argc, char const \*argv[])
{
    string myString;

    cout << "input a string: ";
    getline(cin, myString);
    int length = myString.length();

    char charArray = new char * [length];

    charArray = myString;
    for(int i = 0; i < length; ++i){
        cout << charArray[i] << " ";
    }

    return 0;
}
```

By default, it does not display line numbers. If you want to display line numbers for every code block, you can set `kramdown.syntax_highlighter_opts.block.line_numbers` to true in your `_config.yml` file.

If you want to display line numbers for a specific code block, all you have to do is wrap your code in a liquid tag:


{% highlight c++ linenos %}  <br/> code code code <br/> {% endhighlight %}


The keyword `linenos` triggers display of line numbers.
Produces something like this:


<figure class="highlight"><pre><code class="language-c--" data-lang="c++"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="code"><pre><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="k">const</span> <span class="err">\</span><span class="o">*</span><span class="n">argv</span><span class="p">[])</span>
<span class="p">{</span>
    <span class="n">string</span> <span class="n">myString</span><span class="p">;</span>

    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"input a string: "</span><span class="p">;</span>
    <span class="n">getline</span><span class="p">(</span><span class="n">cin</span><span class="p">,</span> <span class="n">myString</span><span class="p">);</span>
    <span class="kt">int</span> <span class="n">length</span> <span class="o">=</span> <span class="n">myString</span><span class="p">.</span><span class="n">length</span><span class="p">();</span>

    <span class="kt">char</span> <span class="n">charArray</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">char</span> <span class="o">*</span> <span class="p">[</span><span class="n">length</span><span class="p">];</span>

    <span class="n">charArray</span> <span class="o">=</span> <span class="n">myString</span><span class="p">;</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">length</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">){</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">charArray</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="s">" "</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>
 -->]]></content><author><name></name></author><category term="Programming" /><summary type="html"><![CDATA[A compiler made from scratch.]]></summary></entry><entry><title type="html">YPU</title><link href="arxgy.github.io/blog/2022/CPU/" rel="alternate" type="text/html" title="YPU" /><published>2022-12-04T00:00:00+00:00</published><updated>2022-12-04T00:00:00+00:00</updated><id>arxgy.github.io/blog/2022/CPU</id><content type="html" xml:base="arxgy.github.io/blog/2022/CPU/"><![CDATA[<h4 id="overview">Overview</h4>

<p>A toy CPU based on tomasulo algorithm, supporting part of <code class="language-plaintext highlighter-rouge">rv32i</code> ISA.</p>

<h4 id="technical-features">Technical Features</h4>

<ul>
  <li>Tomasulo architecture with Reorder Buffer.</li>
  <li>Hardware Speculation and precise interruption, supported by 2-bit saturating counter predictor of 1024 entries.</li>
  <li>Directly-mapped instruction cache of 2048 entries.</li>
  <li>Reorder buffer of 16 entries.</li>
  <li>Well performance with relatively less hardware overhead.</li>
  <li>Pass all testcases on simulation and FPGA.</li>
  <li>Due to positive delay on 100MHz, YPU is quite possible to support higher frequencies. <strong>(not test yet)</strong></li>
</ul>

<p><br /></p>

<h4 id="evaluation">Evaluation</h4>

<table>
  <thead>
    <tr>
      <th style="text-align: left">Testcases</th>
      <th>tak</th>
      <th>magic</th>
      <th>superloop</th>
      <th>basicopt</th>
      <th>bulgarian</th>
      <th>queens</th>
      <th>Pi</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left"><strong>Time(FPGA)/s</strong></td>
      <td>0.074187</td>
      <td>0.043482</td>
      <td>0.033457</td>
      <td>0.028221</td>
      <td>1.228735</td>
      <td>1.200035</td>
      <td>&gt;3</td>
    </tr>
  </tbody>
</table>

<p><br /></p>

<p>This project costs me about one month to learn <code class="language-plaintext highlighter-rouge">Verilog HDL</code> from scratch and build a FPGA-compatible CPU program from nothing with a workload about <code class="language-plaintext highlighter-rouge">2k+ LoC</code>.</p>
<h4 id="acknowledgement">Acknowledgement</h4>

<p>Thanks Sirius, Pioooooo, XOR-op, happypig for answering questions and giving suggestions.<br />
Thanks Lhtie for playing Overwatch with me, which helped me a lot on releasing pressures.<br />
And at last, thanks myself for no reasons.<br /></p>

<h4 id="source-code">Source Code</h4>
<p><a href="https://github.com/arxgy/YPU">Here</a>.</p>]]></content><author><name></name></author><category term="Programming" /><summary type="html"><![CDATA[A CPU made from scratch.]]></summary></entry><entry><title type="html">铅水</title><link href="arxgy.github.io/blog/2022/Overwhelming-Water/" rel="alternate" type="text/html" title="铅水" /><published>2022-09-20T00:00:00+00:00</published><updated>2022-09-20T00:00:00+00:00</updated><id>arxgy.github.io/blog/2022/Overwhelming-Water</id><content type="html" xml:base="arxgy.github.io/blog/2022/Overwhelming-Water/"><![CDATA[<p>摩托车手的无袖T恤向后翻折<br />
我想起这风来自渤海<br />
不间断踏过沙与沫的少女<br />
白昼从她们身上随意剥离<br />
融成夏天谢幕的节日<br /></p>

<p>阳光延续触不可及的秋梦<br />
也只明朗了窗外的云河<br />
这些不被天空眷恋的人们<br />
总被藏入时间疲惫的皱褶<br />
无奈双颊染入铅的颜色<br />
生活逐渐归属墙垛<br />
我在敲门声中惊醒<br />
你的嘴唇红上泛红<br /></p>]]></content><author><name></name></author><category term="Poems" /><summary type="html"><![CDATA[东关酸风射眸子]]></summary></entry><entry><title type="html">此间丰饶</title><link href="arxgy.github.io/blog/2022/Feast/" rel="alternate" type="text/html" title="此间丰饶" /><published>2022-03-08T00:00:00+00:00</published><updated>2022-03-08T00:00:00+00:00</updated><id>arxgy.github.io/blog/2022/Feast</id><content type="html" xml:base="arxgy.github.io/blog/2022/Feast/"><![CDATA[<p>是你吗<br />
目光在远方凝为回音<br />
却又刻意绕开繁复的花朵<br /></p>

<p>谁曾籍此袭越关山<br />
籍此告别十七岁<br />
柳边水、流泻云<br />
薄荷质感的四月阶梯<br /></p>

<p>谁说此间丰饶<br />
山作心缭乱<br />
叶是风婆娑<br />
窗外朴树整齐温柔<br />
延伫刹那<br />
似曾与你共渡诸多此番春<br /></p>]]></content><author><name></name></author><category term="Poems" /><summary type="html"><![CDATA[是你吗 目光在远方凝为回音 却又刻意绕开繁复的花朵]]></summary></entry><entry><title type="html">无题</title><link href="arxgy.github.io/blog/2021/none/" rel="alternate" type="text/html" title="无题" /><published>2021-02-12T00:00:00+00:00</published><updated>2021-02-12T00:00:00+00:00</updated><id>arxgy.github.io/blog/2021/none</id><content type="html" xml:base="arxgy.github.io/blog/2021/none/"><![CDATA[<p>盼望一朵云<br />
云端满溢炳焕之梦<br />
奔赴与你的约<br />
噙着夏日的悲喜<br />
匆匆跨过日渐失色的山丘<br /></p>

<p>那曾含过我的眼<br />
如今含了北国的霞<br />
那曾孕过梦的云<br />
纷纷成雨，落地为谁<br />
眼中一泓秋水<br /></p>

<p>拨开娓娓晨风<br />
让我为你的瞳孔<br />
绘上无坚不摧的蓝<br />
为你披挂<br />
摧克冷漠的热诚<br />
呼唤潮汐的号角<br /></p>

<p>璆琳的骨，清亮的睫<br />
日光与你双眼相倾<br />
波涛推送我的心潮<br />
赤诚与凝视之间<br />
你是一种飞鸟<br /></p>

<!-- bibliography: 2018-12-22-distill.bib

# Optionally, you can add a table of contents to your post.
# NOTES:
#   - make sure that TOC names match the actual section names
#     for hyperlinks within the post to work correctly.
#   - we may want to automate TOC generation in the future using
#     jekyll-toc plugin (https://github.com/toshimaru/jekyll-toc).
toc:
  - name: Equations
    # if a section has subsections, you can add them as follows:
    # subsections:
    #   - name: Example Child Subsection 1
    #   - name: Example Child Subsection 2
  - name: Citations
  - name: Footnotes
  - name: Code Blocks
  - name: Interactive Plots
  - name: Layouts
  - name: Other Typography?

# Below is an example of injecting additional post-specific styles.
# If you use this post as a template, delete this _styles block.
_styles: >
  .fake-img {
    background: #bbb;
    border: 1px solid rgba(0, 0, 0, 0.1);
    box-shadow: 0 0px 4px rgba(0, 0, 0, 0.1);
    margin-bottom: 12px;
  }
  .fake-img p {
    font-family: monospace;
    color: white;
    text-align: left;
    margin: 12px 0;
    text-align: center;
    font-size: 16px;
  }

---

## Equations

This theme supports rendering beautiful math in inline and display modes using [MathJax 3](https://www.mathjax.org/) engine.
You just need to surround your math expression with `$$`, like `$$ E = mc^2 $$`.
If you leave it inside a paragraph, it will produce an inline expression, just like $$ E = mc^2 $$.

To use display mode, again surround your expression with `$$` and place it as a separate paragraph.
Here is an example:

$$
\left( \sum_{k=1}^n a_k b_k \right)^2 \leq \left( \sum_{k=1}^n a_k^2 \right) \left( \sum_{k=1}^n b_k^2 \right)
$$

Note that MathJax 3 is [a major re-write of MathJax](https://docs.mathjax.org/en/latest/upgrading/whats-new-3.0.html) that brought a significant improvement to the loading and rendering speed, which is now [on par with KaTeX](http://www.intmath.com/cg5/katex-mathjax-comparison.php).

***

## Citations

Citations are then used in the article body with the `<d-cite>` tag.
The key attribute is a reference to the id provided in the bibliography.
The key attribute can take multiple ids, separated by commas.

The citation is presented inline like this: <d-cite key="gregor2015draw"></d-cite> (a number that displays more information on hover).
If you have an appendix, a bibliography is automatically created and populated in it.

Distill chose a numerical inline citation style to improve readability of citation dense articles and because many of the benefits of longer citations are obviated by displaying more information on hover.
However, we consider it good style to mention author last names if you discuss something at length and it fits into the flow well — the authors are human and it’s nice for them to have the community associate them with their work.

***

## Footnotes

Just wrap the text you would like to show up in a footnote in a `<d-footnote>` tag.
The number of the footnote will be automatically generated.<d-footnote>This will become a hoverable footnote.</d-footnote>

***

## Code Blocks

Syntax highlighting is provided within `<d-code>` tags.
An example of inline code snippets: `<d-code language="html">let x = 10;</d-code>`.
For larger blocks of code, add a `block` attribute:

<d-code block language="javascript">
  var x = 25;
  function(x) {
    return x * x;
  }
</d-code>

**Note:** `<d-code>` blocks do not look good in the dark mode.
You can always use the default code-highlight using the `highlight` liquid tag:


<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">25</span><span class="p">;</span>
<span class="kd">function</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">x</span> <span class="o">*</span> <span class="nx">x</span><span class="p">;</span>
<span class="p">}</span></code></pre></figure>


***

## Interactive Plots

You can add interative plots using plotly + iframes :framed_picture:

<div class="l-page">
  <iframe src="/assets/plotly/demo.html" frameborder='0' scrolling='no' height="500px" width="100%" style="border: 1px dashed grey;"></iframe>
</div>

The plot must be generated separately and saved into an HTML file.
To generate the plot that you see above, you can use the following code snippet:


<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="n">pandas</span> <span class="k">as</span> <span class="n">pd</span>
<span class="kn">import</span> <span class="n">plotly.express</span> <span class="k">as</span> <span class="n">px</span>
<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nf">read_csv</span><span class="p">(</span>
  <span class="sh">'</span><span class="s">https://raw.githubusercontent.com/plotly/datasets/master/earthquakes-23k.csv</span><span class="sh">'</span>
<span class="p">)</span>
<span class="n">fig</span> <span class="o">=</span> <span class="n">px</span><span class="p">.</span><span class="nf">density_mapbox</span><span class="p">(</span>
  <span class="n">df</span><span class="p">,</span>
  <span class="n">lat</span><span class="o">=</span><span class="sh">'</span><span class="s">Latitude</span><span class="sh">'</span><span class="p">,</span>
  <span class="n">lon</span><span class="o">=</span><span class="sh">'</span><span class="s">Longitude</span><span class="sh">'</span><span class="p">,</span>
  <span class="n">z</span><span class="o">=</span><span class="sh">'</span><span class="s">Magnitude</span><span class="sh">'</span><span class="p">,</span>
  <span class="n">radius</span><span class="o">=</span><span class="mi">10</span><span class="p">,</span>
  <span class="n">center</span><span class="o">=</span><span class="nf">dict</span><span class="p">(</span><span class="n">lat</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">lon</span><span class="o">=</span><span class="mi">180</span><span class="p">),</span>
  <span class="n">zoom</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span>
  <span class="n">mapbox_style</span><span class="o">=</span><span class="sh">"</span><span class="s">stamen-terrain</span><span class="sh">"</span><span class="p">,</span>
<span class="p">)</span>
<span class="n">fig</span><span class="p">.</span><span class="nf">show</span><span class="p">()</span>
<span class="n">fig</span><span class="p">.</span><span class="nf">write_html</span><span class="p">(</span><span class="sh">'</span><span class="s">assets/plotly/demo.html</span><span class="sh">'</span><span class="p">)</span></code></pre></figure>


***

## Details boxes 

Details boxes are collapsible boxes which hide additional information from the user. They can be added with the `details` liquid tag:

<details><summary>Click here to know more</summary>
<p>Additional details, where math \(2x - 1\) and <code class="language-plaintext highlighter-rouge">code</code> is rendered correctly.</p>
</details>

***

## Layouts

The main text column is referred to as the body.
It is the assumed layout of any direct descendants of the `d-article` element.

<div class="fake-img l-body">
  <p>.l-body</p>
</div>

For images you want to display a little larger, try `.l-page`:

<div class="fake-img l-page">
  <p>.l-page</p>
</div>

All of these have an outset variant if you want to poke out from the body text a little bit.
For instance:

<div class="fake-img l-body-outset">
  <p>.l-body-outset</p>
</div>

<div class="fake-img l-page-outset">
  <p>.l-page-outset</p>
</div>

Occasionally you’ll want to use the full browser width.
For this, use `.l-screen`.
You can also inset the element a little from the edge of the browser by using the inset variant.

<div class="fake-img l-screen">
  <p>.l-screen</p>
</div>
<div class="fake-img l-screen-inset">
  <p>.l-screen-inset</p>
</div>

The final layout is for marginalia, asides, and footnotes.
It does not interrupt the normal flow of `.l-body` sized text except on mobile screen sizes.

<div class="fake-img l-gutter">
  <p>.l-gutter</p>
</div>

***

## Other Typography?

Emphasis, aka italics, with *asterisks* (`*asterisks*`) or _underscores_ (`_underscores_`).

Strong emphasis, aka bold, with **asterisks** or __underscores__.

Combined emphasis with **asterisks and _underscores_**.

Strikethrough uses two tildes. ~~Scratch this.~~

1. First ordered list item
2. Another item
⋅⋅* Unordered sub-list.
1. Actual numbers don't matter, just that it's a number
⋅⋅1. Ordered sub-list
4. And another item.

⋅⋅⋅You can have properly indented paragraphs within list items. Notice the blank line above, and the leading spaces (at least one, but we'll use three here to also align the raw Markdown).

⋅⋅⋅To have a line break without a paragraph, you will need to use two trailing spaces.⋅⋅
⋅⋅⋅Note that this line is separate, but within the same paragraph.⋅⋅
⋅⋅⋅(This is contrary to the typical GFM line break behaviour, where trailing spaces are not required.)

* Unordered list can use asterisks
- Or minuses
+ Or pluses

[I'm an inline-style link](https://www.google.com)

[I'm an inline-style link with title](https://www.google.com "Google's Homepage")

[I'm a reference-style link][Arbitrary case-insensitive reference text]

[I'm a relative reference to a repository file](../blob/master/LICENSE)

[You can use numbers for reference-style link definitions][1]

Or leave it empty and use the [link text itself].

URLs and URLs in angle brackets will automatically get turned into links.
http://www.example.com or <http://www.example.com> and sometimes
example.com (but not on Github, for example).

Some text to show that the reference links can follow later.

[arbitrary case-insensitive reference text]: https://www.mozilla.org
[1]: http://slashdot.org
[link text itself]: http://www.reddit.com

Here's our logo (hover to see the title text):

Inline-style:
![alt text](https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png "Logo Title Text 1")

Reference-style:
![alt text][logo]

[logo]: https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png "Logo Title Text 2"

Inline `code` has `back-ticks around` it.

```javascript
var s = "JavaScript syntax highlighting";
alert(s);
```

```python
s = "Python syntax highlighting"
print s
```

```
No language indicated, so no syntax highlighting.
But let's throw in a <b>tag</b>.
```

Colons can be used to align columns.

| Tables        | Are           | Cool  |
| ------------- |:-------------:| -----:|
| col 3 is      | right-aligned | $1600 |
| col 2 is      | centered      |   $12 |
| zebra stripes | are neat      |    $1 |

There must be at least 3 dashes separating each header cell.
The outer pipes (|) are optional, and you don't need to make the
raw Markdown line up prettily. You can also use inline Markdown.

Markdown | Less | Pretty
--- | --- | ---
*Still* | `renders` | **nicely**
1 | 2 | 3

> Blockquotes are very handy in email to emulate reply text.
> This line is part of the same quote.

Quote break.

> This is a very long line that will still be quoted properly when it wraps. Oh boy let's keep writing to make sure this is long enough to actually wrap for everyone. Oh, you can *put* **Markdown** into a blockquote.


Here's a line for us to start with.

This line is separated from the one above by two newlines, so it will be a *separate paragraph*.

This line is also a separate paragraph, but...
This line is only separated by a single newline, so it's a separate line in the *same paragraph*. -->]]></content><author><name></name></author><category term="Poems" /><summary type="html"><![CDATA[不成章]]></summary></entry><entry><title type="html">午间</title><link href="arxgy.github.io/blog/2019/Bogeda/" rel="alternate" type="text/html" title="午间" /><published>2019-02-14T00:00:00+00:00</published><updated>2019-02-14T00:00:00+00:00</updated><id>arxgy.github.io/blog/2019/Bogeda</id><content type="html" xml:base="arxgy.github.io/blog/2019/Bogeda/"><![CDATA[<p>梦见天山<br />
碧蓝 碧蓝溢满<br />
    梦见天山<br />
在山顶遇见彩色<br />
翻飞的纸屑绕旋<br />
日子与你是两朵雪莲<br /></p>

<p>梦见天山<br />
我的唇紧抿<br />
天山不会绕旋<br />
我的唇遇见彩色<br />
翻飞的纸屑<br /></p>

<p>吻你的睫毛<br />
博格达峰的裂缝<br />
读作飞鸟<br /></p>]]></content><author><name></name></author><category term="Poems" /><summary type="html"><![CDATA[很好的梦]]></summary></entry></feed>